// <reference types="node" />
export interface StatResponse {
  lastModified?: Date
  size: number
  metadata?: any
  type: string
}

export interface ReadOptions {
  buffer?: boolean
}

export interface WriteOptions {
  metadata?: { [key: string]: string }
  type?: string
  maxAge?: number
}

export type WriteResponse = {
  filename: string
  path: string
  metadata: any
}

export interface ListOptions {
  recursive?: boolean
  pageSize?: number
  filter?: string
}

type StorageEventHandler = (event: { path: string; size: number }) => void

export declare type Storage = {
  read: (path: string, options?: ReadOptions) => Promise<ReadableStream | Buffer | undefined>
  readBuffer: (path: string) => Promise<Buffer | undefined>
  write: (path: string, data: any, options?: WriteOptions) => Promise<WriteResponse>
  exists: (path: string) => Promise<boolean>
  stat: (path: string) => Promise<StatResponse | undefined>
  list: (path?: string | undefined, options?: ListOptions) => AsyncGenerator<string[]>
  move: (absPath: string, destPath: string) => Promise<void>
  on: (specifier: string | string[], handler: StorageEventHandler) => void
  copy: (absPath: string, destPath: string) => Promise<void>
  getUploadUrl: (path: string, expiresIn?: number) => Promise<string>
  getDownloadUrl: (path: string, expiresIn?: number) => Promise<string>
  remove: (absPath: string) => Promise<void>
}
declare const storageApi: Storage
export default storageApi
