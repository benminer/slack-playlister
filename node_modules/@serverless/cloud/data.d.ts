interface getOptions {
  meta?: boolean
  reverse?: boolean
  limit?: number
  start?: string
  label?: labels
}

interface setOptions {
  ttl?: number | string | null
  overwrite?: boolean
  label1?: string
  label2?: string
  label3?: string
  label4?: string
  label5?: string
  meta?: boolean
}

type Optional<T> = T | undefined

type WithMeta<T> = T & { meta?: any }

type KeyValue<T> = {
  key: string
  value: WithMeta<T>
}

type GetResponse<T> = Optional<
  | {
      items: KeyValue<T>[]
      lastKey?: string
      next?: () => Promise<GetResponse<T>>
    }
  | T
>

type SetResponse<T> = KeyValue<T> | T

type labels = 'label1' | 'label2' | 'label3' | 'label4' | 'label5'

type DataEventHandler = (event: { previous?: any; item: any }) => void

export declare type Data = {
  get: <T>(keys: string | string[], options?: getOptions | boolean) => Promise<GetResponse<T>>
  getByLabel: <T>(label: labels, keys: string | string[], options?: getOptions | boolean) => Promise<GetResponse<T>>
  remove: (keys: string | string[]) => Promise<boolean>
  set: <T>(keys: any, value: any, options?: setOptions | boolean) => Promise<SetResponse<T>>
  seed: (
    itemsOrPath: string | any[],
    overwrite: boolean
  ) => Promise<{
    items: number
  }>
  on: (name: string | string[], handler: DataEventHandler) => void
}
declare const data: Data
export default data
